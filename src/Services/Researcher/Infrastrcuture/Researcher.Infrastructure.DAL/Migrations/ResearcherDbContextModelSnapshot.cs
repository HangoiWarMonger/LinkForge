// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Researcher.Domain.ValueObjects;
using Researcher.Infrastructure.DAL;

#nullable disable

namespace Researcher.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(ResearcherDbContext))]
    partial class ResearcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "task_item_status", new[] { "done", "todo", "undefined" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Researcher.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BodyMarkdown")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("character varying(200000)")
                        .HasColumnName("BodyMarkdown");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean")
                        .HasColumnName("IsInternal");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProjectId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<Guid>("FromNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("FromNodeId");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("ToNodeId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("FromNodeId");

                    b.HasIndex("GraphId");

                    b.HasIndex("ToNodeId");

                    b.ToTable("Edge", (string)null);
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Graph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProjectId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Graph", (string)null);
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<Guid>("GraphId")
                        .HasColumnType("uuid")
                        .HasColumnName("GraphId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("Node", (string)null);
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Researcher.Domain.Entities.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAtUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParentId");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProjectId");

                    b.Property<TaskItemStatus>("Status")
                        .HasColumnType("task_item_status")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskItem", (string)null);
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Document", b =>
                {
                    b.HasOne("Researcher.Domain.Entities.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Edge", b =>
                {
                    b.HasOne("Researcher.Domain.Entities.Node", "FromNode")
                        .WithMany("OutgoingEdges")
                        .HasForeignKey("FromNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Researcher.Domain.Entities.Graph", null)
                        .WithMany("Edges")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Researcher.Domain.Entities.Node", "ToNode")
                        .WithMany("IncomingEdges")
                        .HasForeignKey("ToNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromNode");

                    b.Navigation("ToNode");
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Graph", b =>
                {
                    b.HasOne("Researcher.Domain.Entities.Project", null)
                        .WithMany("Graphs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Node", b =>
                {
                    b.HasOne("Researcher.Domain.Entities.Graph", null)
                        .WithMany("Nodes")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Researcher.Domain.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("X")
                                .HasColumnType("double precision")
                                .HasColumnName("X");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("Y");

                            b1.HasKey("NodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("Researcher.Domain.Entities.TaskItem", b =>
                {
                    b.HasOne("Researcher.Domain.Entities.TaskItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Researcher.Domain.Entities.Project", null)
                        .WithMany("TaskItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Graph", b =>
                {
                    b.Navigation("Edges");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Node", b =>
                {
                    b.Navigation("IncomingEdges");

                    b.Navigation("OutgoingEdges");
                });

            modelBuilder.Entity("Researcher.Domain.Entities.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Graphs");

                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("Researcher.Domain.Entities.TaskItem", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
